<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-23T10:06:14-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Fling Engine</title><subtitle>Vulkan Game Engine</subtitle><entry><title type="html">UE4 Widget Reflector</title><link href="http://localhost:4000/ue4/general/tools/2019/07/19/ue4-widget-reflector.html" rel="alternate" type="text/html" title="UE4 Widget Reflector" /><published>2019-07-19T22:16:02-04:00</published><updated>2019-07-19T22:16:02-04:00</updated><id>http://localhost:4000/ue4/general/tools/2019/07/19/ue4-widget-reflector</id><content type="html" xml:base="http://localhost:4000/ue4/general/tools/2019/07/19/ue4-widget-reflector.html">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Disclaimer: This is not an official Epic Games document
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-is-the-widget-reflector&quot;&gt;What is the Widget Reflector?&lt;/h2&gt;
&lt;p&gt;The Widget Reflector is a tool in Unreal Engine that shows the you how 
the editor UI is built with &lt;a href=&quot;https://docs.unrealengine.com/en-US/Programming/Slate/index.html&quot;&gt;Slate&lt;/a&gt;,
and allows you to jump straight to the source code that creates it.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-it&quot;&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;You can open the widget reflector by pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Shift + W&lt;/code&gt; in the engine
or by opening the command console and typeing &lt;code class=&quot;highlighter-rouge&quot;&gt;WidgetReflector&lt;/code&gt;. Once you see your
window there are a couple of key things to know:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pick Hit-Testable widgets&lt;/code&gt; will track your mouse curser and show you the Slate
heirarchy associated with the widget underneath it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\widget_reflector\WidgetReflectExample.gif&quot; alt=&quot;Widget Reflector Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; category on the right of the widget you want to see, then you will 
jump to the source code!&lt;/p&gt;

&lt;p&gt;You may notice that some of the things you click on bring you to the actualy Slate source 
code (&lt;code class=&quot;highlighter-rouge&quot;&gt;SInlineEditableTextBlock.cpp&lt;/code&gt; for example). While this can sometimes be what you want,
more often than not you want to see what is actually calling this code and can lead to a 
confusing first time experience, especially if you haven’t used Slate very much before. To solve this problem, just keep going up the call stack in the widget reflector and you will eventually find 
what you are looking for.&lt;/p&gt;

&lt;h2 id=&quot;why-is-it-useful&quot;&gt;Why is it useful?&lt;/h2&gt;

&lt;p&gt;The widget reflector has a lot of good use cases. One good use is to see how 
your game’s UI is being built at a more granular level to help with 
optimization. I also found this tool especially useful when extending the UE editor.
It makes finding examples of how to use Slate very fast and easy.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unrealengine.com/en-US/Engine/UMG/UserGuide/BestPractices/index.html&quot;&gt;UMG Best Practicies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unrealengine.com/en-US/Programming/Slate/Overview/index.html&quot;&gt;Slate Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">Disclaimer: This is not an official Epic Games document</summary></entry><entry><title type="html">C++ 11 Job System</title><link href="http://localhost:4000/cpp/general/2018/11/12/cpp-job-system.html" rel="alternate" type="text/html" title="C++ 11 Job System" /><published>2018-11-12T21:16:02-05:00</published><updated>2018-11-12T21:16:02-05:00</updated><id>http://localhost:4000/cpp/general/2018/11/12/cpp-job-system</id><content type="html" xml:base="http://localhost:4000/cpp/general/2018/11/12/cpp-job-system.html">&lt;p&gt;Over the course of the last semester I have been working on a team to
create a multi-threaded engine using DirectX 12, with a focus on data
oriented design. One of my tasks throughout development was to create a
Job System that we can use to parallelize tasks like physics calculations. This
system came with a couple of constraints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There needs to be a way to track the completion of tasks, to avoid data races
when sending things like position data of an entity to the GPU.&lt;/li&gt;
  &lt;li&gt;The Job System needs to have a simple interface that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt; as
an argument, and so that it would match some of the same data layout of an SDK that
is being used with the project.&lt;/li&gt;
  &lt;li&gt;It must be portable code that will work in both a Windows and UNIX based
environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During my research of how to go about building a job system, I came across
&lt;a href=&quot;https://www.youtube.com/watch?v=8AjRD6mU96s&amp;amp;t=1532s&quot;&gt;this&lt;/a&gt; CppCon talk by
Jason Jurecka. During his talk, he mentions a Task Manager where he uses
&lt;code class=&quot;highlighter-rouge&quot;&gt;std::future&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; to keep track of tasks. This seemed like a good
starting concept for me to base my own job system on.&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;* Check out the full project on &lt;a href=&quot;https://github.com/engine-buddies/light-vox-engine/&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, I needed to define what a &lt;em&gt;job&lt;/em&gt; was going to be in this system.
A job is basically a function pointer, but it needs to be generic so that any
class can use the job system. To solve this problem I took a polymorphic
approach where an &lt;code class=&quot;highlighter-rouge&quot;&gt;IJob&lt;/code&gt; is an abstract definition of the job type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;struct IJob {
    virtual ~IJob() {}
    virtual bool invoke( void* args, int aIndex ) = 0;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allowed me to have two child classes, one for member functions and one for
non-member functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;/** Defintion for non-member functions */
struct JobFunc : IJob {
    JobFunc( void( *aFunc_ptr )( void*, int ) )
    : func_ptr( aFunc_ptr ) { }

    virtual bool invoke( void* args, int aIndex ) override {
        func_ptr( args, aIndex );
        return true;
    }

    /** The function pointer for this job to invoke */
    void( *func_ptr )( void*, int );
};

/** Defintion for member functions */
template &amp;lt;class T&amp;gt;
struct JobMemberFunc : IJob {
    JobMemberFunc( T* aParent, void ( T::*f )( void*, int ) )
    : parentObj ( aParent ), func_ptr( f ) { }

    virtual bool invoke( void* args, int aIndex ) override {
        if ( !parentObj ) { return false; }

        ( parentObj-&amp;gt;*func_ptr )( args, aIndex );
        return true;
    }

    /** the object to invoke the function pointer on */
    T* parentObj;

    /** The function pointer to call when we invoke this function */
    void ( T::*func_ptr )( void*, int );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I have a definition of what a &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; actually is, I want to be able to
store a queue of them for the worker threads to take tasks from. To do this, I
defined at &lt;code class=&quot;highlighter-rouge&quot;&gt;CpuJob&lt;/code&gt; struct:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct CpuJob {
    IJob* jobPtr = nullptr;
    void* jobArgs = nullptr;
    int index = 0;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I do this so that I can easily store both the function pointer to the job, and
the arguments that need to be passed in. This does come add a limitation to the
system that if you were to pass in an argument that was allocated on the stack,
then it could cause problems when actually invoking the job.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;CpuJob&lt;/code&gt; definition, I can now store a queue of &lt;code class=&quot;highlighter-rouge&quot;&gt;CpuJob&lt;/code&gt;’s and make a
simple interface for adding jobs. For the interface that I provide to my users I
just created a simple template &lt;code class=&quot;highlighter-rouge&quot;&gt;AddJob&lt;/code&gt; function that adds to the job queue.
In order to eliminate the most contention, the actual job queue should be a
lockless queue. Check out &lt;a href=&quot;https://www.velanstudios.com/blog/posts/our-first-open-source-release.html&quot;&gt;Velan Studios’ lock free implementation&lt;/a&gt;
if you are interested in that.&lt;/p&gt;

&lt;p&gt;Now that there is a base for a simple job system, I needed a way to actually
track the completion of the Jobs. The reason that we may want this is because if
we have something like physics calculations, they need to happen before we can
send that data to the GPU in order to avoid race conditions.&lt;/p&gt;

&lt;p&gt;To accomplish this, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;std::future&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::promise&lt;/code&gt;, which is not something
that I have seen a lot of other Job System’s use to control their flow of jobs.&lt;/p&gt;

&lt;p&gt;The workflow of doing this is simple, you just need to create a promise
and store it’s future in a variable. Then, you can pass a pointer to that
promise and have your job call the &lt;code class=&quot;highlighter-rouge&quot;&gt;set_value()&lt;/code&gt; function when it is complete,
effectively signaling to the dependent thread that the job is done.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;void Solver::Update () {
    std::promise&amp;lt;void&amp;gt; aPromise;
    std::future&amp;lt;void&amp;gt; aFuture = aPromise.get_future();
    a_argument-&amp;gt;jobPromise = &amp;amp;aPromise;     // a_argument is defined in this class
    jobManager-&amp;gt;AddJob( this, &amp;amp;Physics::Solver::AccumlateForces, ( void* ) ( a_argument ), 0 );
    aFuture.wait(); // This is a blocking function that will wait for that promise
                    // to be fulfilled
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where inside the job function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;void Solver::AccumlateForces( void* args, int index ) {
    PhysicsArguments* myArgs = static_cast&amp;lt; PhysicsArguments* &amp;gt;( args );
    // Some kind of work for this thread...
    myArgs-&amp;gt;jobPromise-&amp;gt;set_value();    // Signal that this job is done
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I am just using a &lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt; type, so it is just acting
as a kind of “flag”. Another clear use case for these is to actually get return
values from they with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; method on a &lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;One thing to watch out for here is the size of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::future&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::promise&lt;/code&gt;.
It shouldn’t really be a huge problem, but it is something to watch out for. On
a 64-bit Ubuntu system:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Size of std::future&amp;lt;void&amp;gt;  : 16
Size of std::promise&amp;lt;void&amp;gt; : 24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They are not huge objects but it is certainly something to be aware of if they
are being created frequently.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;By using the more modern C++ 11 features of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::future&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;std::promise&lt;/code&gt;,
we can create a Job System that can easily make tracking jobs easier
and more explicit to the users of that system.&lt;/p&gt;

&lt;p&gt;One thing that I do want to add to this system is an abstraction layer where
the user can just make some kind of “Job Sequence”, making it even easier and
more explicit of what operations are happening first. At this moment, the system
assumes a level of knowledge about how &lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt;’s and &lt;code class=&quot;highlighter-rouge&quot;&gt;promise&lt;/code&gt;’s work.&lt;/p&gt;

&lt;p&gt;I would love feedback about this system, or any thoughts on potential improvements.&lt;/p&gt;

&lt;p&gt;See the full project on &lt;a href=&quot;https://github.com/engine-buddies/light-vox-engine/&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;c-11-features&quot;&gt;C++ 11 Features&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/thread/future&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::future&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/thread/promise&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::promise&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">Over the course of the last semester I have been working on a team to create a multi-threaded engine using DirectX 12, with a focus on data oriented design. One of my tasks throughout development was to create a Job System that we can use to parallelize tasks like physics calculations. This system came with a couple of constraints:</summary></entry><entry><title type="html">Aurum Kings Development Post Mortem</title><link href="http://localhost:4000/aurumkings/general/2018/08/07/aurum-kings-post-mortem.html" rel="alternate" type="text/html" title="Aurum Kings Development Post Mortem" /><published>2018-08-07T22:16:02-04:00</published><updated>2018-08-07T22:16:02-04:00</updated><id>http://localhost:4000/aurumkings/general/2018/08/07/aurum-kings-post-mortem</id><content type="html" xml:base="http://localhost:4000/aurumkings/general/2018/08/07/aurum-kings-post-mortem.html">&lt;p&gt;Aurum Kings has officially released on Steam for Windows and Linux. While it was
a long and exciting journey throughout the development of Aurum Kings, I think that
it is high time to look back and reflect on my decisions throughout the development
process. This post is not necessarily about the actual game as is it about my own
development process.&lt;/p&gt;

&lt;h1 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h1&gt;

&lt;p&gt;When I think about my development process with Aurum Kings, there are a couple
key lessons that I learned about myself during my time working on the game.&lt;/p&gt;

&lt;h3 id=&quot;be-decisive&quot;&gt;Be Decisive&lt;/h3&gt;

&lt;p&gt;Throughout the process of making Aurum Kings, I was not nearly as decisive as
I should have been. I spent a lot more time than I should have experimenting with
different ideas and programming solutions to problems that didn’t really need
priority. This lead to the code being a bit unorganized towards the end with some
behaviors that I ended up just deleting because they were not actually used anywhere
in the game.&lt;/p&gt;

&lt;p&gt;The fact that I worked on this project for almost a year made it quite clear to me
that I had a bit of a problem with starting things and then not finishing them. Half
written code that I decided I didn’t like or want, mechanics that were prototyped
without any real implementation, and even conflicting coding standards over time.
Since this project, I have written myself a bit of a personal coding standard
in terms of naming conventions, source control tactics, and build pipeline stuff.
This has really improved not only the quality of the code that I write, but the
speed at which I can do it.&lt;/p&gt;

&lt;h3 id=&quot;be-confident&quot;&gt;Be confident&lt;/h3&gt;

&lt;p&gt;This project has really shown me how much I second guess myself with my own work.
I started to notice that I would not trust my own solutions for some reason, even
though I knew they would work. In order to actually show the game at expos, I had
to build up a lot of confidence in my own work, which is something that I have always
struggled with. Aurum Kings really helped me realize that if I don’t believe in myself
and my work, than others aren’t going to either.&lt;/p&gt;

&lt;h3 id=&quot;feature-cuts&quot;&gt;Feature cuts&lt;/h3&gt;

&lt;p&gt;While I was working on the game, there were a ton of features and things that I
wanted to put into the game and didn’t have time to do so. There were also things
that I put time into doing, but either wasn’t happy with them or didn’t have time
to finish. I have seen what it’s like to have a set deadline to ship a game, and
have to prioritize what needs to be done and cut what isn’t a necessity. This was
something that I hadn’t really experienced at scale until I shipped Aurum Kings,
even during my previous time at a local studio.&lt;/p&gt;

&lt;h1 id=&quot;technical-skills-gained&quot;&gt;Technical skills gained&lt;/h1&gt;

&lt;p&gt;I learned a lot while working on this project, but these are the skills
that I would say developed the most over the course of the game.&lt;/p&gt;

&lt;h3 id=&quot;automation&quot;&gt;Automation&lt;/h3&gt;

&lt;p&gt;I have certainly found the value in automating things while working on this project.
Jenkins is something that I started to use to do my builds for me and even upload
them if I wanted to. I also learned Python to interface
with Blender and export all my blender files to .FBX files, so that I didn’t
have to work with the original .blend files. You can see these scripts on my
GitHub &lt;a href=&quot;https://github.com/BenjaFriend/blender-quick-export&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;Even though I ended up cutting the features from the shipped game for a better
experience, I did end up getting the core gameplay of Aurum Kings networked and
replicating correctly. I read a &lt;a href=&quot;https://www.amazon.com/Multiplayer-Game-Programming-Architecting-Networked/dp/0134034309/ref=sr_1_1?ie=UTF8&amp;amp;qid=1533736822&amp;amp;sr=8-1&amp;amp;keywords=games+network+architecture&quot;&gt;book on network architecture&lt;/a&gt;
and worked with both &lt;a href=&quot;https://docs.unity3d.com/Manual/UNet.html&quot;&gt;UNet&lt;/a&gt; and &lt;a href=&quot;https://www.photonengine.com/en/pun&quot;&gt;Photon PUN&lt;/a&gt;. Since then I have done several projects involving networking in both Unity and Unreal.&lt;/p&gt;

&lt;h3 id=&quot;dev-ops&quot;&gt;Dev Ops&lt;/h3&gt;

&lt;p&gt;Since I was working alone on this project, I had to handle everything in terms
of operations as well. I had to have ways to report bugs, analyze build logs, and
manage a list of things to do. I used Trello to give myself notice of bugs or things
that needed to be fixed. To look at my build logs I ran an ELK stack on my Jenkins
server to access the build logs from anywhere. I know that I was really just getting exposed to
the world of dev ops and how it is applied in game development, but I still feel
like I have learned a ton about how to make a good tools and build pipeline when
it comes to games.&lt;/p&gt;

&lt;h3 id=&quot;game-services&quot;&gt;Game Services&lt;/h3&gt;

&lt;p&gt;Integrating Steam into Aurum Kings was another big technical accomplishment for me.
During the time when I was figuring out multiplayer, I used SteamWorks to do matchmaking and NAT
punchthrough. I also integrated achievements into Aurum Kings. My implementation of
game services in Aurum Kings was to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;GameServices&lt;/code&gt; class that could do things
like unlock achievements, set stat progress, and more. I abstracted the functions out
to a class so it would be easier to ship on multiple platforms with different services
in the future if I wanted to.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Hopefully this was a good explanation about what kind of things I learned from
shipping a game by myself on Steam. I learned a lot of not only technical skills
but also things about myself through this experience.&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">Aurum Kings has officially released on Steam for Windows and Linux. While it was a long and exciting journey throughout the development of Aurum Kings, I think that it is high time to look back and reflect on my decisions throughout the development process. This post is not necessarily about the actual game as is it about my own development process.</summary></entry><entry><title type="html">Aurum Kings released on Steam!</title><link href="http://localhost:4000/aurumkings/general/2018/07/24/aurum-kings-released-on-steam.html" rel="alternate" type="text/html" title="Aurum Kings released on Steam!" /><published>2018-07-24T22:16:02-04:00</published><updated>2018-07-24T22:16:02-04:00</updated><id>http://localhost:4000/aurumkings/general/2018/07/24/aurum-kings-released-on-steam</id><content type="html" xml:base="http://localhost:4000/aurumkings/general/2018/07/24/aurum-kings-released-on-steam.html">&lt;p&gt;I am happy to announce that Aurum Kings has officially launched on Steam today!&lt;/p&gt;

&lt;p&gt;You can check it out on Steam &lt;a href=&quot;https://store.steampowered.com/app/848460/Aurum_Kings/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This has been a long journey for me which I learned a whole load of stuff from, and there will definitely be a post mortem coming soon! For now, I am going to be waiting for bug reports, crashes, and posting updates.&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">I am happy to announce that Aurum Kings has officially launched on Steam today!</summary></entry><entry><title type="html">Unity build automation with Jenkins</title><link href="http://localhost:4000/general/2018/07/12/unity-build-automation-with-jenkins.html" rel="alternate" type="text/html" title="Unity build automation with Jenkins" /><published>2018-07-12T16:59:32-04:00</published><updated>2018-07-12T16:59:32-04:00</updated><id>http://localhost:4000/general/2018/07/12/unity-build-automation-with-jenkins</id><content type="html" xml:base="http://localhost:4000/general/2018/07/12/unity-build-automation-with-jenkins.html">&lt;p&gt;Recently I have been upgrading my development pipeline and looking for ways to improve my dev ops. One of the biggest things that I knew I could improve upon was my build pipeline for my Unity games.&lt;/p&gt;

&lt;p&gt;Since I have started working on &lt;a href=&quot;https://store.steampowered.com/app/848460/Aurum_Kings/&quot;&gt;&lt;em&gt;Aurum Kings&lt;/em&gt;&lt;/a&gt;, I have had to build for Windows, Mac, and Linux in an effort to make the game as accessible as possible. What I was doing at first was just building to one platform, switching, and then building to the other. Needless to say this got old pretty fast, so I started looking into &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;. Jenkins was the obvious choice for me, not only because I spent a ton of time hearing about it at GDC, but because it is free and open source.&lt;/p&gt;

&lt;p&gt;By the end of this guide you will be to use Jenkins to build your Unity game on a given time interval, or whenever the repository gets updated.&lt;/p&gt;

&lt;p&gt;Something to note before starting is that this is done on Windows 10, so your process may be a bit different on Mac, but it should be mostly the same. You theoretically can do this on a Linux server as well, but I would not recommend it because the Unity Linux version is not very stable and may cause weird errors.&lt;/p&gt;

&lt;h4 id=&quot;step-one--installing--initial-setup-of-jenkins&quot;&gt;Step One — Installing / Initial Setup of Jenkins&lt;/h4&gt;

&lt;p&gt;Download Jenkins and follow the installer from &lt;a href=&quot;https://jenkins.io/download/&quot;&gt;their site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After it’s done, it should automatically open up a new tab in your browser. If it doesn’t, just go to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; (Or whatever the address of your server is) .&lt;/p&gt;

&lt;p&gt;After verifying your secret Jenkins password, install their suggested plugins (If you know more about what plugins that you want than feel free to change this).&lt;/p&gt;

&lt;p&gt;Once this is done, then all that is left to do is install the GitHub Integration plugin. Go to Manage Jenkins &amp;gt; Manage Plugins &amp;gt; Available (Tab) and search for &lt;a href=&quot;https://plugins.jenkins.io/github-pullrequest&quot;&gt;GitHub Integration&lt;/a&gt;.  Select the checkbox for it and then hit Install. You can restart Jenkins after it is installed if you want, but you don’t necessarily have to.&lt;/p&gt;

&lt;h4 id=&quot;step-two--allowing-jenkins-to-access-your-repository&quot;&gt;Step Two — Allowing Jenkins to access your repository&lt;/h4&gt;

&lt;p&gt;To allow your Jenkins server access to your GitHub repository, you have to give it a deployment key. A deployment key is just an SSH key pair that Jenkins and GitHub will use to access each other.&lt;/p&gt;

&lt;p&gt;First you have to generate your key pair on your Jenkins machine. There are multiple ways to do this, but I found the easiest way was just to use the command line. The following command will generate a key pair for you: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On Windows 10 the keys will be saved to your .ssh folder under your user. There you can open up the keys in any text editor to see them.&lt;/p&gt;

&lt;p&gt;Next you have to make the repository aware of your Jenkins public key. To do this, go to your repository &amp;gt; Settings &amp;gt; Deploy keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\jenkins_tut\buildStep.png&quot; alt=&quot;Deploy Key Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy and paste the contents of your &lt;em&gt;public&lt;/em&gt; SSH key into the “Key” field and hit “Add key”.  Now that Jenkins has read only access to your repository, we have to add the credentials to Jenkins itself.&lt;/p&gt;

&lt;p&gt;To do this go to Jenkins &amp;gt; Credentials &amp;gt; Global &amp;gt; Add Credentials. The kind of credential is &lt;em&gt;SSH Username with private key&lt;/em&gt;. You can then paste in your private key and save it. Jenkins and GitHub should now be able to integrate together!&lt;/p&gt;

&lt;h4 id=&quot;step-three--creating-a-job&quot;&gt;step three — Creating a job&lt;/h4&gt;

&lt;p&gt;Now that Jenkins can access your Git repo, it can use that to build your Unity game!&lt;/p&gt;

&lt;p&gt;To make a new job, just select “New Item” in the top left corner of the Jenkins home page. Then give your Job a name, and select a &lt;em&gt;Freestyle Project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From here, you can see a couple of options. Give your job a description, and paste your GitHub URL into the “GitHub Project” section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\jenkins_tut\description.png&quot; alt=&quot;Deploy Key Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under “Source Code Management” select &lt;em&gt;Git.&lt;/em&gt; Enter your repository URL again, and select the credentials that you entered earlier. Notice that you can select which branches to build here as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\jenkins_tut\sourceCodeManagement.png&quot; alt=&quot;Deploy Key Screen&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;adding-build-triggers&quot;&gt;Adding Build triggers&lt;/h4&gt;

&lt;p&gt;Build triggers are what make Jenkins start the build steps. We will have one on a Cron task to run every morning, and one when the Master branch of our repository is updated.&lt;/p&gt;

&lt;p&gt;The Cron task is simple, as you can just select the “Build Periodically” and type in the times you want it to run. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;H 05 * * 1-5&lt;/code&gt; will run a build at 5 AM Monday through Friday.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note – In order to use GitHub hook integration, your Jenkins server needs to be accessible to GitHub. This means that you will either have to port forward your router for Jenkins, or you could use some sort of cloud service.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to have Jenkins build when the branches are updated, check the “GitHub hook trigger for GITScm polling” option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\jenkins_tut\buildTriggers.png&quot; alt=&quot;Deploy Key Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back in your GitHub settings, go to “Integration &amp;amp; services” tab in the repo settings. Hit the Add Service button, and select “Jenkins (GitHub plugin)”. All you have to do to set this up is follow the instructions and type in the following hook URL:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt; YOUR JENKINS SERVER ADDRESS &amp;gt;/github-webhook&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Jenkins will now build when the master branch updates.&lt;/p&gt;

&lt;h4 id=&quot;build-steps&quot;&gt;Build Steps&lt;/h4&gt;

&lt;p&gt;The last thing to do with your Jenkins server is to actually tell it how to build your project. I wrote a quick Python script to call the &lt;a href=&quot;https://docs.unity3d.com/Manual/CommandLineArguments.html&quot; target=&quot;_blank&quot;&gt;command line arguments for Unity&lt;/a&gt; that I wanted.&lt;/p&gt;

&lt;p&gt;You can see my Python script on my GitHub &lt;a href=&quot;https://github.com/BenjaFriend/AurumKings-Build&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. This script in particular just runs a Windows build with output going to a folder named by the time and date.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\jenkins_tut\buildStep.png&quot; alt=&quot;Deploy Key Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is pretty simple to add in a build step. Personally I like to just run a Windows batch command to run my Python script, but there are a ton of different ways to do this.&lt;/p&gt;

&lt;p&gt;This is also where you could run test suites, zip up the build and post it somewhere, etc.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Overall, integrating Jenkins into my development has been really cool and fun to learn. The process has improved the scalability of my work greatly, as well as allowing me to test and iterate faster throughout development.&lt;/p&gt;

&lt;p&gt;I would highly recommend setting up a Jenkins server of your own, especially because of how  low the barrier to entry is. You could do this with an old laptop sitting in a closet, or with an AWS instance. Just remember that if you are using an old laptop in a corner that you should not rely on that to be the only spot where your builds are. Always back up your data!!&lt;/p&gt;

&lt;p&gt;I hope this gives you a clear idea of how to use Jenkins, and happy automating!&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><category term="guide" /><category term="jenkins" /><category term="unity" /><summary type="html">Recently I have been upgrading my development pipeline and looking for ways to improve my dev ops. One of the biggest things that I knew I could improve upon was my build pipeline for my Unity games.</summary></entry><entry><title type="html">Extra Life 2018</title><link href="http://localhost:4000/general/2018/04/17/extra-life-2018.html" rel="alternate" type="text/html" title="Extra Life 2018" /><published>2018-04-17T19:58:12-04:00</published><updated>2018-04-17T19:58:12-04:00</updated><id>http://localhost:4000/general/2018/04/17/extra-life-2018</id><content type="html" xml:base="http://localhost:4000/general/2018/04/17/extra-life-2018.html">&lt;p&gt;I know that Extra Life doesn’t happen until November, but it’s best to get an early start on this stuff! This will mark my third year participating in this event, and I have a lot of plans going forward about this.&lt;/p&gt;

&lt;p&gt;For now, I made a new team for the RIT Game Development Club. We plan on doing a charity game jam around this event, where the general idea is that we stream people’s progress on their jam games, and collect donations throughout the jam.&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">I know that Extra Life doesn’t happen until November, but it’s best to get an early start on this stuff! This will mark my third year participating in this event, and I have a lot of plans going forward about this.</summary></entry><entry><title type="html">GDC 2018</title><link href="http://localhost:4000/general/post-mortem/2018/04/10/gdc-2018-2.html" rel="alternate" type="text/html" title="GDC 2018" /><published>2018-04-10T19:19:30-04:00</published><updated>2018-04-10T19:19:30-04:00</updated><id>http://localhost:4000/general/post-mortem/2018/04/10/gdc-2018-2</id><content type="html" xml:base="http://localhost:4000/general/post-mortem/2018/04/10/gdc-2018-2.html">&lt;p&gt;This past week at GDC has been truly amazing. I have met a lot of new people as well as getting to experience new things with good friends. When I was packing up my stuff to leave on Friday, I had a touch of sadness in my heart that it was over, but a fiery passion to apply the new things that I have learned.&lt;/p&gt;

&lt;p&gt;I went to GDC with the Summits + Conference pass, and it was totally worth the extra bucks for what I got out of it. At every talk I went to, I met &lt;em&gt;at least&lt;/em&gt; two new people with common interests. With the number of talks that I went to, I met a lot of people.&lt;/p&gt;

&lt;p&gt;On top of the talks, I went to as many round table sessions as I possibly could, especially the tools and automation ones. Having been exposed to a lot of new concepts with tools and automation, I think that may very well be what I want to do with my career in game development. Don’t get me wrong, I love making games and doing things like gameplay programming and design, but there is something so satisfying to me about how I can optimize the workflows of brilliant and talented people.&lt;/p&gt;

&lt;p&gt;I already have made things like automatic bug reporters and build automators, so going to GDC and meeting people like [The Toolsmiths] has really set it out for me.&lt;/p&gt;

&lt;h2 id=&quot;challenges-of-gdc&quot;&gt;Challenges of GDC&lt;/h2&gt;

&lt;p&gt;I didn’t struggle with a lot of things in GDC, but there were a couple notable&lt;/p&gt;

&lt;p&gt;points that I think can be improved upon not only by the conference, but in the industry as a whole.&lt;/p&gt;

&lt;p&gt;Being a student is hard at GDC. That is just the plain truth. It can be very difficult to feel like you belong in a place filled with the most talented people in the industry while you are just beginning. However, that’s not the main problem for students in my opinion. Before I came to GDC I was avidly warned not to tell people that I was a student. This was because most of the people just assume that you are only there to find a job, and that you have no knowledge to share. I feel like this is not only very unwelcoming, but also a great way to turn new people away from our industry in general.&lt;/p&gt;

&lt;p&gt;I think the root of this problem partially stems from how quickly the upper education system has changed in the past couple of years. Colleges and Universities that specialized in games did not exist just a short couple of years ago, and it is fair to be weary and judgmental of the students coming out of them. However, I do understand why students have this kind of stigma around them. During my time there I witnessed some students who just seemed uneducated that this event is not really about getting a job, but making new connections and learning from our peers in the industry.&lt;/p&gt;

&lt;p&gt;The next thing that I think a lot of people would agree on is that GDC needs to decrease the cost of going there. I think that the passes are way too expensive, especially considering how many people end up going to the event. And not just the passes themselves, San Francisco is a very expensive city to stay in for a week, especially the area that GDC is located in. I think that moving GDC to a different area that is more accessible and less expensive would be the right choice. I doubt that is going to happen though.&lt;/p&gt;

&lt;h2 id=&quot;positives&quot;&gt;Positives&lt;/h2&gt;

&lt;h4 id=&quot;roundtables&quot;&gt;Roundtables&lt;/h4&gt;

&lt;p&gt;The roundtables that I went to were by far my favorite thing about GDC this year. In particular I really enjoyed the Technical Tools sessions not only because of the topics, but because of the community around them. I found out that a ton of people have started to pick up the ELK stack as a way to do error reporting and build logs, which I really support. Another reason that I really liked the roundtables is because they were a nice break from just sitting and watching a talk. I loved all the talks that I went to, but it was nice to have something interactive throughout the day to shake things up a bit. Furthermore, because the roundtables were set out in a way that it “Tools Day 1”, “Tools Day 2”, etc. it meant that a lot of the same crowd was going to the same roundtables. This let me meet people and continue talking with them the next day, and build better relationships.&lt;/p&gt;

&lt;h4 id=&quot;talking-with-speakers&quot;&gt;Talking with speakers&lt;/h4&gt;

&lt;p&gt;This may be obvious, but being able to go up and talk to the people about their talks afterwards was a favorite things that I did while at GDC. I really loved continuing the conversation afterwards.&lt;/p&gt;

&lt;h4 id=&quot;parties&quot;&gt;Parties&lt;/h4&gt;

&lt;p&gt;I feel like I can’t do a write up about my GDC without touching the party aspect. There were so many opportunities at GDC to meet new people, but parties were nice because everyone there just wanted to hang out and have fun!&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">This past week at GDC has been truly amazing. I have met a lot of new people as well as getting to experience new things with good friends. When I was packing up my stuff to leave on Friday, I had a touch of sadness in my heart that it was over, but a fiery passion to apply the new things that I have learned.</summary></entry><entry><title type="html">Javascript Audio Visualizer</title><link href="http://localhost:4000/data%20vis/general/project/2018/02/28/javascript-audio-visualizer.html" rel="alternate" type="text/html" title="Javascript Audio Visualizer" /><published>2018-02-28T19:10:58-05:00</published><updated>2018-02-28T19:10:58-05:00</updated><id>http://localhost:4000/data%20vis/general/project/2018/02/28/javascript-audio-visualizer</id><content type="html" xml:base="http://localhost:4000/data%20vis/general/project/2018/02/28/javascript-audio-visualizer.html">&lt;p&gt;For a recent class project, I had to make an audio visualizer using JavaScript with a canvas. I think that it looks pretty cool, and I am proud of how it turned out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000\media\posts\js_audio_vis\audioVis.png&quot; alt=&quot;Deploy Key Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can check out the audio visualizer &lt;a href=&quot;https://people.rit.edu/~bah8892/330/projects/audioviz/final/AudioViz/web-audio-visualizer-start.html&quot;&gt;here!&lt;/a&gt; There are a couple of settings to mess around with, and I especially like the inverted color scheme as well. This was a really interesting project, and it was a ton of fun to make! I would really recommend doing this if you are into JavaScript and wanna make something cool.&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">For a recent class project, I had to make an audio visualizer using JavaScript with a canvas. I think that it looks pretty cool, and I am proud of how it turned out.</summary></entry><entry><title type="html">Cool Pallet Tools</title><link href="http://localhost:4000/general/2018/02/21/cool-pallet-tools.html" rel="alternate" type="text/html" title="Cool Pallet Tools" /><published>2018-02-21T21:27:40-05:00</published><updated>2018-02-21T21:27:40-05:00</updated><id>http://localhost:4000/general/2018/02/21/cool-pallet-tools</id><content type="html" xml:base="http://localhost:4000/general/2018/02/21/cool-pallet-tools.html">&lt;p&gt;Recently I have been doing a lot of work tweaking the color pallet for &lt;a href=&quot;https://bullhorngames.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Aurum Kings&lt;/a&gt;, and I figured that I would share a couple resources that I have found useful.&lt;/p&gt;

&lt;p&gt;The first one is a pretty well known tool, but very versatile. The &lt;a href=&quot;https://color.adobe.com/explore/?filter=most-popular&amp;amp;time=month&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Adobe Color CC&lt;/a&gt; has a whole section of complete color pallets, searchable by things like “winter”, “happy”, etc. This has been pretty useful for me when I look for a biome for a map, like a desert  of sorts. There is also part of the site that allows you to use a color wheel to make your own color pallets.&lt;/p&gt;

&lt;p&gt;Next is &lt;a href=&quot;https://support.steampowered.com/kb/9334-YDXV-8590/dota-2-workshop-character-art-guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Valve’s &lt;em&gt;Dota 2&lt;/em&gt; character art and design principles. &lt;/a&gt; This is a page that goes into detail about a ton of stuff from color schemes to silhouettes. It is also just neat to see the design docs that Valve used for Dota.&lt;/p&gt;

&lt;p&gt;And of course, there is &lt;a href=&quot;http://paletton.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Paletton&lt;/a&gt;. I normally prefer the Adobe color picker, but this is great because it gives you previews for different color blind effects as well. It also has some alright templates to view the different colors in.&lt;/p&gt;

&lt;p&gt;Alright, hopefully one of these tools was something you haven’t seen before and can help you out!&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><summary type="html">Recently I have been doing a lot of work tweaking the color pallet for Aurum Kings, and I figured that I would share a couple resources that I have found useful.</summary></entry><entry><title type="html">Aurum Kings Demo – A Post Mortem</title><link href="http://localhost:4000/aurumkings/general/post-mortem/project/2017/12/09/aurum-kings-demo-a-post-mortem.html" rel="alternate" type="text/html" title="Aurum Kings Demo &amp;#8211; A Post Mortem" /><published>2017-12-09T22:54:21-05:00</published><updated>2017-12-09T22:54:21-05:00</updated><id>http://localhost:4000/aurumkings/general/post-mortem/project/2017/12/09/aurum-kings-demo-a-post-mortem</id><content type="html" xml:base="http://localhost:4000/aurumkings/general/post-mortem/project/2017/12/09/aurum-kings-demo-a-post-mortem.html">&lt;p&gt;Recently I wrote a blog post on the &lt;a href=&quot;https://bullhorngames.com/2017/12/01/this-week-at-bull-horn-games-12-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official Bull Horn Game website&lt;/a&gt; about what went right and wrong at the Mini Maker Faire, and what the plans are for the game in the future. However, that wasn’t really in depth about my personal development process, and what I learned from the working two months on this project.&lt;/p&gt;

&lt;p&gt;One of my game design professors recently gave some advice that everyone should do a post mortem of every game they make, and keep it somewhere so you don’t forget the lessons that you have learned. I have done some post mortem type stuff in the past on this blog, so I figured why not keep it here? Hopefully one day someone else will learn something useful from this too.&lt;/p&gt;

&lt;h2 id=&quot;what-went-wrong&quot;&gt;What went wrong?&lt;/h2&gt;

&lt;h3 id=&quot;organized-to-do-list&quot;&gt;Organized To Do List&lt;/h3&gt;

&lt;p&gt;Over the course of the project, I tried out a couple different methods for keeping a solid to-do list, but it took me a while to find one that I actually liked. Eventually I was spread pretty thin between different things like &lt;a href=&quot;http://todoist.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Todoist&lt;/a&gt;, a white board, and Trello. I ended up using &lt;a href=&quot;http://trello.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Trello&lt;/a&gt; to keep a nice and organized list of feedback, bug reports, and to-do list items.&lt;/p&gt;

&lt;h3 id=&quot;process-of-creating-art&quot;&gt;Process of Creating Art&lt;/h3&gt;

&lt;p&gt;I ended up doing all of the art myself, which took &lt;em&gt;way&lt;/em&gt; longer than I wanted it to in order to get the environments to look how I wanted them to. At the beginning of this project I had never used Blender before, and really was not too familiar with Gimp either. I used those tools specifically because they are free to use and don’t require me to use any special licenses. This was an awesome learning experience, and now I know how to make mediocre 3D models in Blender, but I really wish that I had teamed up with an artist. Speaking of Blender, I took advantage of the fact that Unity auto-generates .fbx files to use in the engine from .blend files, and didn’t actually export my models to .fbx myself. Let me tell you, &lt;em&gt;that was a huge mistake.&lt;/em&gt; At the end of the development cycle I was planning on just using the cloud build offered by Unity to target Mac and Linux. Cloud build does NOT support .blend files. &lt;strong&gt;Future Ben, please &lt;/strong&gt;keep your 3D models in a separate folder and export them into Unity or whatever engine you are using.&lt;/p&gt;

&lt;h3 id=&quot;lack-of-confidence-throughout-the-development-process&quot;&gt;Lack of Confidence throughout the development process&lt;/h3&gt;

&lt;p&gt;Something that I really learned how to do during this project is how to actually talk about my work. I used to just talk about my projects almost in a negative tone, which doesn’t get the person you are talking to about it very excited. &lt;strong&gt;If you are passionate about your work, then others will be too. &lt;/strong&gt;I think that this was also more of a personal issue where I am way too critical of my own work, which is something that I addressed simply by surrounding myself with positive people. This year was really when I started to be around other game devs on a daily basis, and actually enjoying my time spent working.&lt;/p&gt;

&lt;h3 id=&quot;my-work-environment&quot;&gt;My work environment&lt;/h3&gt;

&lt;p&gt;Being in college and trying to make a side project like this is tough. Not only because of classwork and whatnot, but because of distractions. At the beginning of this project I was just working on this project whenever I could, which lead to a lot of distractions from my room mates, people wanting to play games, etc. What I did to address this was allot time in my calendar every day to specifically work on this game. Close my door, listen to some flowing music, and get to work. Not distractions. This worked pretty well for a while, but I got to a point where this game was almost the only thing that I did in my free time. &lt;strong&gt;Remember to go out and have fun. &lt;/strong&gt;Step away from the project for a day or two, it really helps you clear your head and get in a better mental state.&lt;/p&gt;

&lt;h2 id=&quot;what-went-right&quot;&gt;What went right?&lt;/h2&gt;

&lt;h3 id=&quot;audio-creation&quot;&gt;Audio Creation&lt;/h3&gt;

&lt;p&gt;Working with &lt;a href=&quot;https://twitter.com/theTreeSerok?lang=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rowan Waring&lt;/a&gt; was a huge positive in this game, and he really did a great job with the music in this game. Don’t be afraid to ask other people if they want to be a part of your project, especially if you are a programmer and they do art things. Art and music are extremely valuable and can make or break the feel of your game.&lt;/p&gt;

&lt;h3 id=&quot;rapid-prototypes-and-iteration&quot;&gt;Rapid Prototypes and Iteration&lt;/h3&gt;

&lt;p&gt;Fortunately, I created the systems necessary to very quickly tweak and create new abilities in Aurum Kings. I definitely recommend taking the time to do things like scriptable objects, custom editor windows, and so on in Unity specifically. Something that I want to work on is to write a simple batch script or something that will streamline my build pipeline. Just to quickly target multiple platforms, and not have to sit at my computer for 30 minutes building for Windows, Mac, and Linux.&lt;/p&gt;

&lt;h3 id=&quot;playtests&quot;&gt;Playtests&lt;/h3&gt;

&lt;p&gt;I was fortunate enough to be with a group of other game devs and designers who held regular playtest nights, which was awesome! Along with that, my roommates (not game devs) were willing to playtest any  new build that I put out, and give me really valuable feedback.  &lt;strong&gt;Playtest as often as you can, especially if you are the only one working on a project. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I think that is pretty much it for this post mortem of Aurum Kings so far, hopefully somebody can get something out of this as well!&lt;/p&gt;</content><author><name>Ben Hoffman</name></author><category term="post-mortem" /><summary type="html">Recently I wrote a blog post on the official Bull Horn Game website about what went right and wrong at the Mini Maker Faire, and what the plans are for the game in the future. However, that wasn’t really in depth about my personal development process, and what I learned from the working two months on this project.</summary></entry></feed>